// ignore_for_file: constant_identifier_names, library_private_types_in_public_api

import 'package:flutter/material.dart';
import "dart:math" as math;

class MalnutritionChecker extends StatefulWidget {
  const MalnutritionChecker({super.key});

  @override
  _MalnutritionCheckerState createState() => _MalnutritionCheckerState();
}

class _MalnutritionCheckerState extends State<MalnutritionChecker> {
  final TextEditingController _ageController = TextEditingController();
  final TextEditingController _weightController = TextEditingController();
  final TextEditingController _heightController = TextEditingController();
  final TextEditingController _acController = TextEditingController();
  final TextEditingController _headCircumferenceController =
      TextEditingController();
  final TextEditingController _skinfoldThicknessController =
      TextEditingController();

  String malnutritionStatus = '';
  String? _selectedGender;

  @override
  void dispose() {
    _ageController.dispose();
    _weightController.dispose();
    _heightController.dispose();
    _acController.dispose();
    _headCircumferenceController.dispose();
    _skinfoldThicknessController.dispose();
    super.dispose();
  }

  final List<String> _genders = <String>[
    'male',
    'female',
  ];

  final formKey = GlobalKey<FormState>();
  @override
  Widget build(BuildContext context) {
    final height = MediaQuery.of(context).size.height;
    return Scaffold(
      appBar: AppBar(
        elevation: 0.5,
        title: const Text(
          'Malnutrition Cheker',
          style: TextStyle(
            fontFamily: 'Montserrat',
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),
          child: Form(
            key: formKey,
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: MediaQuery.of(context).size.width / 3,
                      child: Text(
                        'Age (months): ',
                        style: TextStyle(
                          fontSize: height * 0.025,
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Flexible(
                      child: TextFormField(
                        controller: _ageController,
                        keyboardType: TextInputType.number,
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please enter age ';
                          }
                          if (int.parse(value) > 61) {
                            return 'Enter values lesser than 5 years';
                          }

                          return null;
                        },
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    SizedBox(
                      width: MediaQuery.of(context).size.width / 2.85,
                      child: Text(
                        'Gender: ',
                        style: TextStyle(
                          fontSize: height * 0.025,
                        ),
                      ),
                    ),
                    Flexible(
                      child: Container(
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(5.0),
                          color: Colors.transparent,
                          border: Border.all(color: Colors.grey),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.only(
                              left: 10, top: 5, bottom: 5),
                          child: DropdownButton<String>(
                            underline: const SizedBox(),
                            value: _selectedGender,
                            items: _genders
                                .map((gender) => DropdownMenuItem<String>(
                                      value: gender,
                                      child: Text(gender),
                                    ))
                                .toList(),
                            onChanged: (value) {
                              setState(() {
                                _selectedGender = value;
                              });
                            },
                            borderRadius: BorderRadius.circular(10),
                            isExpanded: true,
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: MediaQuery.of(context).size.width / 3,
                      child: Text(
                        'Weight (Kg): ',
                        style: TextStyle(
                          fontSize: height * 0.025,
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Flexible(
                      child: TextFormField(
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please enter a weight';
                          }
                          if (double.parse(value) > 18.336) {
                            return 'Enter values between 3.3kg to 18.3';
                          }
                          if (double.parse(value) < 3.2) {
                            return 'Enter values between 3.3kg to 18.3';
                          }

                          return null;
                        },
                        controller: _weightController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: MediaQuery.of(context).size.width / 3,
                      child: Text(
                        'Height (cm): ',
                        style: TextStyle(
                          fontSize: height * 0.025,
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Flexible(
                      child: TextFormField(
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please enter a height';
                          }
                          if (double.parse(value) > 120) {
                            return 'Enter values between 45cm to 120cm';
                          }
                          if (double.parse(value) < 45) {
                            return 'Enter values between 45cm to 120cm';
                          }

                          return null;
                        },
                        controller: _heightController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: MediaQuery.of(context).size.width / 3,
                      child: Text(
                        'Arm Circumference (cm): ',
                        style: TextStyle(
                          fontSize: height * 0.025,
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Flexible(
                      child: TextFormField(
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please enter a Arm Circumference';
                          }
                          if (double.parse(value) > 16.5) {
                            return 'Values between 12.8cm to 16.5cm';
                          }
                          if (double.parse(value) < 12.8) {
                            return 'Values between 12.8cm to 16.5cm';
                          }

                          return null;
                        },
                        controller: _acController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: MediaQuery.of(context).size.width / 3,
                      child: Text(
                        'head circumference (cm): ',
                        style: TextStyle(
                          fontSize: height * 0.025,
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Flexible(
                      child: TextFormField(
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please enter a head circumference';
                          }
                          if (double.parse(value) > 50.8) {
                            return 'Enter values between 33.5cm to 50cm';
                          }
                          if (double.parse(value) < 33.5) {
                            return 'Enter values between 33.5cm to 51cm';
                          }

                          return null;
                        },
                        controller: _headCircumferenceController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SizedBox(
                      width: MediaQuery.of(context).size.width / 3,
                      child: Text(
                        'Triceps SkinFold thickness (mm): ',
                        style: TextStyle(
                          fontSize: height * 0.025,
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Flexible(
                      child: TextFormField(
                        validator: (value) {
                          if (value!.isEmpty) {
                            return 'Please enter a Triceps SkinFold thickness';
                          }
                          if (double.parse(value) > 10.4) {
                            return 'Enter values between 7.4cm to 10.4cm';
                          }
                          if (double.parse(value) < 7.4) {
                            return 'Enter values between 7.4cm to 10.4cm';
                          }

                          return null;
                        },
                        controller: _skinfoldThicknessController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          border: OutlineInputBorder(),
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 40),
                SizedBox(
                  width: MediaQuery.of(context).size.width / 2,
                  child: ElevatedButton(
                    onPressed: () {
                      FocusScope.of(context).unfocus();
                      if (formKey.currentState!.validate()) {
                        formKey.currentState!.save();
                        int age = int.tryParse(_ageController.text) ?? 0;
                        double height =
                            double.tryParse(_heightController.text) ?? 0.0;
                        double weight =
                            double.tryParse(_weightController.text) ?? 0.0;
                        double armCircum =
                            double.tryParse(_acController.text) ?? 0.0;
                        double headCircum = double.tryParse(
                                _headCircumferenceController.text) ??
                            0.0;
                        double skinfoldThickness = double.tryParse(
                                _skinfoldThicknessController.text) ??
                            0.0;

                        String gender = _selectedGender ?? 'male';
                        print('weight : $weight');
                        print('height : $height');
                        print('age : $age');
                        print('gender : $gender');

                        malnutritionStatus = getMalnutritionStatus(
                          ageMonths: age,
                          gender: gender,
                          weightKg: weight,
                          heightCm: height,
                          armCircum: armCircum,
                          headCm: headCircum,
                          skinfoldThickness: skinfoldThickness,
                        );
                        print(getMalnutritionStatus(
                          ageMonths: age,
                          gender: gender,
                          weightKg: weight,
                          heightCm: height,
                          armCircum: armCircum,
                          headCm: headCircum,
                          skinfoldThickness: skinfoldThickness,
                        ));

                        print(malnutritionStatus);

                        showDialog(
                          context: context,
                          builder: (BuildContext context) {
                            return AlertDialog(
                              shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10)),
                              title: const Text('Result'),
                              content: Text(
                                getMalnutritionStatus(
                                  ageMonths: age,
                                  gender: gender,
                                  weightKg: weight,
                                  heightCm: height,
                                  armCircum: armCircum,
                                  headCm: headCircum,
                                  skinfoldThickness: skinfoldThickness,
                                ),
                              ),
                              actions: [
                                ElevatedButton(
                                  onPressed: () {
                                    Navigator.pop(context);
                                  },
                                  child: const Text('Ok'),
                                )
                              ],
                            );
                          },
                        );
                      }
                    },
                    child: const Padding(
                      padding: EdgeInsets.symmetric(vertical: 10),
                      child: Text(
                        'Check',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  String getMalnutritionStatus({
    required int ageMonths,
    required String gender,
    required double weightKg,
    required double heightCm,
    required double armCircum,
    required double headCm,
    required double skinfoldThickness,
  }) {
    // Determine the z-score for weight-for-age
    double wfaZScore = getWfaZScore(ageMonths, gender, weightKg);
    print('wfaZScore = $wfaZScore');

    // Determine the z-score for height-for-age
    double hfaZScore = getHfaZScore(ageMonths, gender, heightCm);
    print('hfaZScore = $hfaZScore');

    // Determine the z-score for weight-for-height
    double wfhZScore = getWfhZScore(weightKg, heightCm, gender, ageMonths);
    print('wfhZScore = $wfhZScore');

    // Determine the MUAC z-score
    double muacZScore = getArmCircumZScore(armCircum, ageMonths, gender);
    print('muacZScore = $muacZScore');

    // Determine the head circumference z-score
    double headZScore = getHeadCircmZScore(headCm, ageMonths, gender);
    print('headZScore = $headZScore');

    double skinFoldZScore =
        getTricepsSkinfoldThicknessZScore(skinfoldThickness, ageMonths, gender);
    print('skinFoldZScore = $skinFoldZScore');
    double compositeZScore = (wfaZScore +
            hfaZScore +
            wfhZScore +
            muacZScore +
            headZScore +
            skinFoldZScore) /
        math.sqrt(6);
    print('compositeZScore $compositeZScore');

    if (compositeZScore < -2) {
      return 'Severe malnutrition';
    } else if (compositeZScore < -1) {
      return 'Moderate malnutrition';
    } else if (compositeZScore > 2) {
      return 'Severe overnutrition';
    } else if (compositeZScore > 1) {
      return 'Moderate overnutrition';
    } else {
      return 'Normal';
    }
  }

  double getWfaZScore(int ageMonths, String sex, double weightKg) {
    List<double> lValues;
    List<double> sValues;
    List<double> mValues;

    if (sex == "male") {
      // L, S, and M values for weight-for-age z-scores for males, ages 0 to 60 months
      lValues = [
        0.3487,
        0.2297,
        0.197,
        0.1738,
        0.1553,
        0.1395,
        0.1257,
        0.1134,
        0.1021,
        0.0917,
        0.082,
        0.073,
        0.0644,
        0.0563,
        0.0487,
        0.0413,
        0.0343,
        0.0275,
        0.0211,
        0.0148,
        0.0087,
        0.0029,
        -0.0028,
        -0.0083,
        -0.0137,
        -0.0189,
        -0.024,
        -0.0289,
        -0.0337,
        -0.0385,
        -0.0431,
        -0.0476,
        -0.052,
        -0.0564,
        -0.0606,
        -0.0648,
        -0.0689,
        -0.0729,
        -0.0769,
        -0.0808,
        -0.0846,
        -0.0883,
        -0.092,
        -0.0957,
        -0.0993,
        -0.1028,
        -0.1063,
        -0.1097,
        -0.1131,
        -0.1165,
        -0.1198,
        -0.123,
        -0.1262,
        -0.1294,
        -0.1325,
        -0.1356,
        -0.1387,
        -0.1417,
        -0.1447,
        -0.1477,
        -0.1506
      ];
      mValues = [
        3.3464,
        4.4709,
        5.5675,
        6.3762,
        7.0023,
        7.5105,
        7.934,
        8.297,
        8.6151,
        8.9014,
        9.1649,
        9.4122,
        9.6479,
        9.8749,
        10.0953,
        10.3108,
        10.5228,
        10.7319,
        10.9385,
        11.143,
        11.3462,
        11.5486,
        11.7504,
        11.9514,
        12.1515,
        12.3502,
        12.5466,
        12.7401,
        12.9303,
        13.1169,
        13.3,
        13.4798,
        13.6567,
        13.8309,
        14.0031,
        14.1736,
        14.3429,
        14.5113,
        14.6791,
        14.8466,
        15.014,
        15.1813,
        15.3486,
        15.5158,
        15.6828,
        15.8497,
        16.0163,
        16.1827,
        16.3489,
        16.515,
        16.6811,
        16.8471,
        17.0132,
        17.1792,
        17.3452,
        17.5111,
        17.6768,
        17.8422,
        18.0073,
        18.1722,
        18.3366
      ];
      sValues = [
        0.14602,
        0.13395,
        0.12385,
        0.11727,
        0.11316,
        0.1108,
        0.10958,
        0.10902,
        0.10882,
        0.10881,
        0.10891,
        0.10906,
        0.10925,
        0.10949,
        0.10976,
        0.11007,
        0.11041,
        0.11079,
        0.11119,
        0.11164,
        0.11211,
        0.11261,
        0.11314,
        0.11369,
        0.11426,
        0.11485,
        0.11544,
        0.11604,
        0.11664,
        0.11723,
        0.11781,
        0.11839,
        0.11896,
        0.11953,
        0.12008,
        0.12062,
        0.12116,
        0.12168,
        0.1222,
        0.12271,
        0.12322,
        0.12373,
        0.12425,
        0.12478,
        0.12531,
        0.12586,
        0.12643,
        0.127,
        0.12759,
        0.12819,
        0.1288,
        0.12943,
        0.13005,
        0.13069,
        0.13133,
        0.13197,
        0.13261,
        0.13325,
        0.13389,
        0.13453,
        0.13517
      ];
    } else if (sex == "female") {
      // L, S, and M values for weight-for-age z-scores for females, ages 0 to 60 months
      lValues = [
        0.3809,
        0.1714,
        0.0962,
        0.0402,
        -0.005,
        -0.043,
        -0.0756,
        -0.1039,
        -0.1288,
        -0.1507,
        -0.17,
        -0.1872,
        -0.2024,
        -0.2158,
        -0.2278,
        -0.2384,
        -0.2478,
        -0.2562,
        -0.2637,
        -0.2703,
        -0.2762,
        -0.2815,
        -0.2862,
        -0.2903,
        -0.2941,
        -0.2975,
        -0.3005,
        -0.3032,
        -0.3057,
        -0.308,
        -0.3101,
        -0.312,
        -0.3138,
        -0.3155,
        -0.3171,
        -0.3186,
        -0.3201,
        -0.3216,
        -0.323,
        -0.3243,
        -0.3257,
        -0.327,
        -0.3283,
        -0.3296,
        -0.3309,
        -0.3322,
        -0.3335,
        -0.3348,
        -0.3361,
        -0.3374,
        -0.3387,
        -0.34,
        -0.3414,
        -0.3427,
        -0.344,
        -0.3453,
        -0.3466,
        -0.3479,
        -0.3492,
        -0.3505,
        -0.3518
      ];
      sValues = [
        0.14171,
        0.13724,
        0.13,
        0.12619,
        0.12402,
        0.12274,
        0.12204,
        0.12178,
        0.12181,
        0.12199,
        0.12223,
        0.12247,
        0.12268,
        0.12283,
        0.12294,
        0.12299,
        0.12303,
        0.12306,
        0.12309,
        0.12315,
        0.12323,
        0.12335,
        0.1235,
        0.12369,
        0.1239,
        0.12414,
        0.12441,
        0.12472,
        0.12506,
        0.12545,
        0.12587,
        0.12633,
        0.12683,
        0.12737,
        0.12794,
        0.12855,
        0.12919,
        0.12988,
        0.13059,
        0.13135,
        0.13213,
        0.13293,
        0.13376,
        0.1346,
        0.13545,
        0.1363,
        0.13716,
        0.138,
        0.13884,
        0.13968,
        0.14051,
        0.14132,
        0.14213,
        0.14293,
        0.14371,
        0.14448,
        0.14525,
        0.146,
        0.14675,
        0.14748,
        0.14821
      ];
      mValues = [
        3.2322,
        4.1873,
        5.1282,
        5.8458,
        6.4237,
        6.8985,
        7.297,
        7.6422,
        7.9487,
        8.2254,
        8.48,
        8.7192,
        8.9481,
        9.1699,
        9.387,
        9.6008,
        9.8124,
        10.0226,
        10.2315,
        10.4393,
        10.6464,
        10.8534,
        11.0608,
        11.2688,
        11.4775,
        11.6864,
        11.8947,
        12.1015,
        12.3059,
        12.5073,
        12.7055,
        12.9006,
        13.093,
        13.2837,
        13.4731,
        13.6618,
        13.8503,
        14.0385,
        14.2265,
        14.414,
        14.601,
        14.7873,
        14.9727,
        15.1573,
        15.341,
        15.524,
        15.7064,
        15.8882,
        16.0697,
        16.2511,
        16.4322,
        16.6133,
        16.7942,
        16.9748,
        17.1551,
        17.3347,
        17.5136,
        17.6916,
        17.8686,
        18.0445,
        18.2193
      ];
    } else {
      throw ArgumentError("Invalid sex");
    }

    // Find the closest index in the L, S, and M value lists for the given age (assuming monthly intervals)
    int index = ageMonths;
    if (index < 0) {
      index = 0;
    } else if (index >= lValues.length) {
      index = lValues.length - 1;
    }

    // Calculate the weight-for-age z-score using the L, S, and M values at the closest index
    print(index);
    double L = lValues[index];

    double S = sValues[index];
    double M = mValues[index];
    print(L);
    print(S);
    print(M);

    //(math.pow((7.5 / 8.48), -0.1700) - 1) / (-0.1700 * 0.12181)
    double weightForAgeZScore = ((math.pow((weightKg / M), L) - 1) / (S * L));
    //double weightForAgeZScore = ((weightInKg / M).pow(L) - 1) / (S * L);

    return weightForAgeZScore;
  }

  double getHfaZScore(int ageMonths, String sex, double heightCM) {
    List<double> lValues;
    List<double> sValues;
    List<double> mValues;

    if (sex == "female") {
      // L, S, and M values for weight-for-age z-scores for males, ages 0 to 60 months
      lValues = [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ];
      mValues = [
        49.1477,
        53.6872,
        57.0673,
        59.8029,
        62.0899,
        64.0301,
        65.7311,
        67.2873,
        68.7498,
        70.1435,
        71.4818,
        72.771,
        74.015,
        75.2176,
        76.3817,
        77.5099,
        78.6055,
        79.671,
        80.7079,
        81.7182,
        82.7036,
        83.6654,
        84.604,
        85.5202,
        86.2873,
        86.5904,
        87.4462,
        88.283,
        89.1004,
        89.8991,
        90.6797,
        91.443,
        92.1906,
        92.9239,
        93.6444,
        94.3533,
        95.0515,
        95.7399,
        96.4187,
        97.0885,
        97.7493,
        98.4015,
        99.0448,
        99.6795,
        100.3058,
        100.9238,
        101.5337,
        102.136,
        102.7312,
        103.3197,
        103.9021,
        104.4786,
        105.0494,
        105.6148,
        106.1748,
        106.7295,
        107.2788,
        107.8227,
        108.3613,
        108.8948,
        109.4233
      ];
      sValues = [
        0.0379,
        0.0364,
        0.03568,
        0.0352,
        0.03486,
        0.03463,
        0.03448,
        0.03441,
        0.0344,
        0.03444,
        0.03452,
        0.03464,
        0.03479,
        0.03496,
        0.03514,
        0.03534,
        0.03555,
        0.03576,
        0.03598,
        0.0362,
        0.03643,
        0.03666,
        0.03688,
        0.03711,
        0.03734,
        0.03786,
        0.03808,
        0.0383,
        0.03851,
        0.03872,
        0.03893,
        0.03913,
        0.03933,
        0.03952,
        0.03971,
        0.03989,
        0.04006,
        0.04024,
        0.04041,
        0.04057,
        0.04073,
        0.04089,
        0.04105,
        0.0412,
        0.04135,
        0.0415,
        0.04164,
        0.04179,
        0.04193,
        0.04206,
        0.0422,
        0.04233,
        0.04246,
        0.04259,
        0.04272,
        0.04285,
        0.04298,
        0.0431,
        0.04322,
        0.04334,
        0.04347
      ];
    } else if (sex == "male") {
      // L, S, and M values for weight-for-age z-scores for females, ages 0 to 60 months
      lValues = [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ];
      sValues = [
        0.03795,
        0.03557,
        0.03424,
        0.03328,
        0.03257,
        0.03204,
        0.03165,
        0.03139,
        0.03124,
        0.03117,
        0.03118,
        0.03125,
        0.03137,
        0.03154,
        0.03174,
        0.03197,
        0.03222,
        0.0325,
        0.03279,
        0.0331,
        0.03342,
        0.03376,
        0.0341,
        0.03445,
        0.03479,
        0.03542,
        0.03576,
        0.0361,
        0.03642,
        0.03674,
        0.03704,
        0.03733,
        0.03761,
        0.03787,
        0.03812,
        0.03836,
        0.03858,
        0.03879,
        0.039,
        0.03919,
        0.03937,
        0.03954,
        0.03971,
        0.03986,
        0.04002,
        0.04016,
        0.04031,
        0.04045,
        0.04059,
        0.04073,
        0.04086,
        0.041,
        0.04113,
        0.04126,
        0.04139,
        0.04152,
        0.04165,
        0.04177,
        0.0419,
        0.04202,
        0.04214
      ];
      mValues = [
        49.8842,
        54.7244,
        58.4249,
        61.4292,
        63.886,
        65.9026,
        67.6236,
        69.1645,
        70.5994,
        71.9687,
        73.2812,
        74.5388,
        75.7488,
        76.9186,
        78.0497,
        79.1458,
        80.2113,
        81.2487,
        82.2587,
        83.2418,
        84.1996,
        85.1348,
        86.0477,
        86.941,
        87.5994,
        87.972,
        88.8065,
        89.6197,
        90.412,
        91.1828,
        91.9327,
        92.6631,
        93.3753,
        94.0711,
        94.7532,
        95.4236,
        96.0835,
        96.7337,
        97.3749,
        98.0073,
        98.631,
        99.2459,
        99.8515,
        100.4485,
        101.0374,
        101.6186,
        102.1933,
        102.7625,
        103.3273,
        103.8886,
        104.4473,
        105.0041,
        105.5596,
        106.1138,
        106.6668,
        107.2188,
        107.7697,
        108.3198,
        108.8689,
        109.417,
        109.9638
      ];
    } else {
      throw ArgumentError("Invalid sex");
    }

    // Find the closest index in the L, S, and M value lists for the given age (assuming monthly intervals)
    int index = ageMonths;
    if (index < 0) {
      index = 0;
    } else if (index >= lValues.length) {
      index = lValues.length - 1;
    }

    // Calculate the weight-for-age z-score using the L, S, and M values at the closest index
    print(index);
    double L = lValues[index];

    double S = sValues[index];
    double M = mValues[index];
    print(L);
    print(S);
    print(M);

    //(math.pow((7.5 / 8.48), -0.1700) - 1) / (-0.1700 * 0.12181)
    double weightForAgeZScore = ((math.pow((heightCM / M), L) - 1) / (S * L));
    //double weightForAgeZScore = ((weightInKg / M).pow(L) - 1) / (S * L);

    return weightForAgeZScore;
  }

  double roundToNearestHalf(double cm) {
    return (cm * 2).round() / 2;
  }

  double getWfhZScore(
      double weightKg, double heightCm, String sex, int ageMonths) {
    // Round the height to the nearest half centimeter
    double roundedHeightCm = roundToNearestHalf(heightCm);
    List<double> lValues;
    List<double> sValues;
    List<double> mValues;

    int index = 0;

    if (sex == 'female') {
      if (ageMonths < 25) {
        List<double> length = [
          45,
          45.5,
          46,
          46.5,
          47,
          47.5,
          48,
          48.5,
          49,
          49.5,
          50,
          50.5,
          51,
          51.5,
          52,
          52.5,
          53,
          53.5,
          54,
          54.5,
          55,
          55.5,
          56,
          56.5,
          57,
          57.5,
          58,
          58.5,
          59,
          59.5,
          60,
          60.5,
          61,
          61.5,
          62,
          62.5,
          63,
          63.5,
          64,
          64.5,
          65,
          65.5,
          66,
          66.5,
          67,
          67.5,
          68,
          68.5,
          69,
          69.5,
          70,
          70.5,
          71,
          71.5,
          72,
          72.5,
          73,
          73.5,
          74,
          74.5,
          75,
          75.5,
          76,
          76.5,
          77,
          77.5,
          78,
          78.5,
          79,
          79.5,
          80,
          80.5,
          81,
          81.5,
          82,
          82.5,
          83,
          83.5,
          84,
          84.5,
          85,
          85.5,
          86,
          86.5,
          87,
          87.5,
          88,
          88.5,
          89,
          89.5,
          90,
          90.5,
          91,
          91.5,
          92,
          92.5,
          93,
          93.5,
          94,
          94.5,
          95,
          95.5,
          96,
          96.5,
          97,
          97.5,
          98,
          98.5,
          99,
          99.5,
          100,
          100.5,
          101,
          101.5,
          102,
          102.5,
          103,
          103.5,
          104,
          104.5,
          105,
          105.5,
          106,
          106.5,
          107,
          107.5,
          108,
          108.5,
          109,
          109.5,
          110
        ];

        index = length.indexOf(roundedHeightCm);
        lValues = [
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833
        ];
        sValues = [
          0.09029,
          0.09033,
          0.09037,
          0.0904,
          0.09044,
          0.09048,
          0.09052,
          0.09056,
          0.0906,
          0.09064,
          0.09068,
          0.09072,
          0.09076,
          0.0908,
          0.09085,
          0.09089,
          0.09093,
          0.09098,
          0.09102,
          0.09106,
          0.0911,
          0.09114,
          0.09118,
          0.09121,
          0.09125,
          0.09128,
          0.0913,
          0.09132,
          0.09134,
          0.09135,
          0.09136,
          0.09137,
          0.09137,
          0.09136,
          0.09135,
          0.09133,
          0.09131,
          0.09129,
          0.09126,
          0.09123,
          0.09119,
          0.09115,
          0.0911,
          0.09106,
          0.09101,
          0.09096,
          0.0909,
          0.09085,
          0.09079,
          0.09074,
          0.09068,
          0.09062,
          0.09056,
          0.0905,
          0.09043,
          0.09037,
          0.09031,
          0.09025,
          0.09018,
          0.09012,
          0.09005,
          0.08999,
          0.08992,
          0.08985,
          0.08979,
          0.08972,
          0.08965,
          0.08959,
          0.08952,
          0.08946,
          0.0894,
          0.08934,
          0.08928,
          0.08923,
          0.08918,
          0.08914,
          0.0891,
          0.08906,
          0.08903,
          0.089,
          0.08898,
          0.08897,
          0.08895,
          0.08895,
          0.08895,
          0.08895,
          0.08896,
          0.08898,
          0.089,
          0.08903,
          0.08906,
          0.08909,
          0.08913,
          0.08918,
          0.08923,
          0.08928,
          0.08934,
          0.08941,
          0.08948,
          0.08955,
          0.08963,
          0.08972,
          0.08981,
          0.0899,
          0.09,
          0.0901,
          0.09021,
          0.09033,
          0.09044,
          0.09057,
          0.09069,
          0.09083,
          0.09096,
          0.0911,
          0.09125,
          0.09139,
          0.09155,
          0.0917,
          0.09186,
          0.09203,
          0.09219,
          0.09236,
          0.09254,
          0.09271,
          0.09289,
          0.09307,
          0.09326,
          0.09344,
          0.09363,
          0.09382,
          0.09401
        ];
        mValues = [
          2.4607,
          2.5457,
          2.6306,
          2.7155,
          2.8007,
          2.8867,
          2.9741,
          3.0636,
          3.156,
          3.252,
          3.3518,
          3.4557,
          3.5636,
          3.6754,
          3.7911,
          3.9105,
          4.0332,
          4.1591,
          4.2875,
          4.4179,
          4.5498,
          4.6827,
          4.8162,
          4.95,
          5.0837,
          5.2173,
          5.3507,
          5.4834,
          5.6151,
          5.7454,
          5.8742,
          6.0014,
          6.127,
          6.2511,
          6.3738,
          6.4948,
          6.6144,
          6.7328,
          6.8501,
          6.9662,
          7.0812,
          7.195,
          7.3076,
          7.4189,
          7.5288,
          7.6375,
          7.7448,
          7.8509,
          7.9559,
          8.0599,
          8.163,
          8.2651,
          8.3666,
          8.4676,
          8.5679,
          8.6674,
          8.7661,
          8.8638,
          8.9601,
          9.0552,
          9.149,
          9.2418,
          9.3337,
          9.4252,
          9.5166,
          9.6086,
          9.7015,
          9.7957,
          9.8915,
          9.9892,
          10.0891,
          10.1916,
          10.2965,
          10.4041,
          10.514,
          10.6263,
          10.741,
          10.8578,
          10.9767,
          11.0974,
          11.2198,
          11.3435,
          11.4684,
          11.594,
          11.7201,
          11.8461,
          11.972,
          12.0976,
          12.2229,
          12.3477,
          12.4723,
          12.5965,
          12.7205,
          12.8443,
          12.9681,
          13.092,
          13.2158,
          13.3399,
          13.4643,
          13.5892,
          13.7146,
          13.8408,
          13.9676,
          14.0953,
          14.2239,
          14.3537,
          14.4848,
          14.6174,
          14.7519,
          14.8882,
          15.0267,
          15.1676,
          15.3108,
          15.4564,
          15.6046,
          15.7553,
          15.9087,
          16.0645,
          16.2229,
          16.3837,
          16.547,
          16.7129,
          16.8814,
          17.0527,
          17.2269,
          17.4039,
          17.5839,
          17.7668,
          17.9526,
          18.1412,
          18.3324
        ];
      } else {
        List<double> heightList = [
          65,
          65.5,
          66,
          66.5,
          67,
          67.5,
          68,
          68.5,
          69,
          69.5,
          70,
          70.5,
          71,
          71.5,
          72,
          72.5,
          73,
          73.5,
          74,
          74.5,
          75,
          75.5,
          76,
          76.5,
          77,
          77.5,
          78,
          78.5,
          79,
          79.5,
          80,
          80.5,
          81,
          81.5,
          82,
          82.5,
          83,
          83.5,
          84,
          84.5,
          85,
          85.5,
          86,
          86.5,
          87,
          87.5,
          88,
          88.5,
          89,
          89.5,
          90,
          90.5,
          91,
          91.5,
          92,
          92.5,
          93,
          93.5,
          94,
          94.5,
          95,
          95.5,
          96,
          96.5,
          97,
          97.5,
          98,
          98.5,
          99,
          99.5,
          100,
          100.5,
          101,
          101.5,
          102,
          102.5,
          103,
          103.5,
          104,
          104.5,
          105,
          105.5,
          106,
          106.5,
          107,
          107.5,
          108,
          108.5,
          109,
          109.5,
          110,
          110.5,
          111,
          111.5,
          112,
          112.5,
          113,
          113.5,
          114,
          114.5,
          115,
          115.5,
          116,
          116.5,
          117,
          117.5,
          118,
          118.5,
          119,
          119.5,
          120
        ];

        index = heightList.indexOf(roundedHeightCm);
        lValues = [
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833,
          -0.3833
        ];
        mValues = [
          7.2402,
          7.3523,
          7.463,
          7.5724,
          7.6806,
          7.7874,
          7.893,
          7.9976,
          8.1012,
          8.2039,
          8.3058,
          8.4071,
          8.5078,
          8.6078,
          8.707,
          8.8053,
          8.9025,
          8.9983,
          9.0928,
          9.1862,
          9.2786,
          9.3703,
          9.4617,
          9.5533,
          9.6456,
          9.739,
          9.8338,
          9.9303,
          10.0289,
          10.1298,
          10.2332,
          10.3393,
          10.4477,
          10.5586,
          10.6719,
          10.7874,
          10.9051,
          11.0248,
          11.1462,
          11.2691,
          11.3934,
          11.5186,
          11.6444,
          11.7705,
          11.8965,
          12.0223,
          12.1478,
          12.2729,
          12.3976,
          12.522,
          12.6461,
          12.77,
          12.8939,
          13.0177,
          13.1415,
          13.2654,
          13.3896,
          13.5142,
          13.6393,
          13.765,
          13.8914,
          14.0186,
          14.1466,
          14.2757,
          14.4059,
          14.5376,
          14.671,
          14.8062,
          14.9434,
          15.0828,
          15.2246,
          15.3687,
          15.5154,
          15.6646,
          15.8164,
          15.9707,
          16.1276,
          16.287,
          16.4488,
          16.6131,
          16.78,
          16.9496,
          17.122,
          17.2973,
          17.4755,
          17.6567,
          17.8407,
          18.0277,
          18.2174,
          18.4096,
          18.6043,
          18.8015,
          19.0009,
          19.2024,
          19.406,
          19.6116,
          19.819,
          20.028,
          20.2385,
          20.4502,
          20.6629,
          20.8766,
          21.0909,
          21.3059,
          21.5213,
          21.737,
          21.9529,
          22.169,
          22.3851,
          22.6012,
          22.8173
        ];
        sValues = [
          0.09113,
          0.09109,
          0.09104,
          0.09099,
          0.09094,
          0.09088,
          0.09083,
          0.09077,
          0.09071,
          0.09065,
          0.09059,
          0.09053,
          0.09047,
          0.09041,
          0.09035,
          0.09028,
          0.09022,
          0.09016,
          0.09009,
          0.09003,
          0.08996,
          0.08989,
          0.08983,
          0.08976,
          0.08969,
          0.08963,
          0.08956,
          0.0895,
          0.08943,
          0.08937,
          0.08932,
          0.08926,
          0.08921,
          0.08916,
          0.08912,
          0.08908,
          0.08905,
          0.08902,
          0.08899,
          0.08897,
          0.08896,
          0.08895,
          0.08895,
          0.08895,
          0.08896,
          0.08897,
          0.08899,
          0.08901,
          0.08904,
          0.08907,
          0.08911,
          0.08915,
          0.0892,
          0.08925,
          0.08931,
          0.08937,
          0.08944,
          0.08951,
          0.08959,
          0.08967,
          0.08975,
          0.08984,
          0.08994,
          0.09004,
          0.09015,
          0.09026,
          0.09037,
          0.09049,
          0.09062,
          0.09075,
          0.09088,
          0.09102,
          0.09116,
          0.09131,
          0.09146,
          0.09161,
          0.09177,
          0.09193,
          0.09209,
          0.09226,
          0.09243,
          0.09261,
          0.09278,
          0.09296,
          0.09315,
          0.09333,
          0.09352,
          0.09371,
          0.0939,
          0.09409,
          0.09428,
          0.09448,
          0.09467,
          0.09487,
          0.09507,
          0.09527,
          0.09546,
          0.09566,
          0.09586,
          0.09606,
          0.09626,
          0.09646,
          0.09666,
          0.09686,
          0.09707,
          0.09727,
          0.09747,
          0.09767,
          0.09788,
          0.09808,
          0.09828
        ];
      }
    } else {
      if (ageMonths < 25) {
        List<double> heightList = [
          45,
          45.5,
          46,
          46.5,
          47,
          47.5,
          48,
          48.5,
          49,
          49.5,
          50,
          50.5,
          51,
          51.5,
          52,
          52.5,
          53,
          53.5,
          54,
          54.5,
          55,
          55.5,
          56,
          56.5,
          57,
          57.5,
          58,
          58.5,
          59,
          59.5,
          60,
          60.5,
          61,
          61.5,
          62,
          62.5,
          63,
          63.5,
          64,
          64.5,
          65,
          65.5,
          66,
          66.5,
          67,
          67.5,
          68,
          68.5,
          69,
          69.5,
          70,
          70.5,
          71,
          71.5,
          72,
          72.5,
          73,
          73.5,
          74,
          74.5,
          75,
          75.5,
          76,
          76.5,
          77,
          77.5,
          78,
          78.5,
          79,
          79.5,
          80,
          80.5,
          81,
          81.5,
          82,
          82.5,
          83,
          83.5,
          84,
          84.5,
          85,
          85.5,
          86,
          86.5,
          87,
          87.5,
          88,
          88.5,
          89,
          89.5,
          90,
          90.5,
          91,
          91.5,
          92,
          92.5,
          93,
          93.5,
          94,
          94.5,
          95,
          95.5,
          96,
          96.5,
          97,
          97.5,
          98,
          98.5,
          99,
          99.5,
          100,
          100.5,
          101,
          101.5,
          102,
          102.5,
          103,
          103.5,
          104,
          104.5,
          105,
          105.5,
          106,
          106.5,
          107,
          107.5,
          108,
          108.5,
          109,
          109.5,
          110
        ];
        print("ur in boy less that 25 age omth");

        index = heightList.indexOf(roundedHeightCm);

        lValues = [
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521
        ];
        mValues = [
          2.441,
          2.5244,
          2.6077,
          2.6913,
          2.7755,
          2.8609,
          2.948,
          3.0377,
          3.1308,
          3.2276,
          3.3278,
          3.4311,
          3.5376,
          3.6477,
          3.762,
          3.8814,
          4.006,
          4.1354,
          4.2693,
          4.4066,
          4.5467,
          4.6892,
          4.8338,
          4.9796,
          5.1259,
          5.2721,
          5.418,
          5.5632,
          5.7074,
          5.8501,
          5.9907,
          6.1284,
          6.2632,
          6.3954,
          6.5251,
          6.6527,
          6.7786,
          6.9028,
          7.0255,
          7.1467,
          7.2666,
          7.3854,
          7.5034,
          7.6206,
          7.737,
          7.8526,
          7.9674,
          8.0816,
          8.1955,
          8.3092,
          8.4227,
          8.5358,
          8.648,
          8.7594,
          8.8697,
          8.9788,
          9.0865,
          9.1927,
          9.2974,
          9.401,
          9.5032,
          9.6041,
          9.7033,
          9.8007,
          9.8963,
          9.9902,
          10.0827,
          10.1741,
          10.2649,
          10.3558,
          10.4475,
          10.5405,
          10.6352,
          10.7322,
          10.8321,
          10.935,
          11.0415,
          11.1516,
          11.2651,
          11.3817,
          11.5007,
          11.6218,
          11.7444,
          11.8678,
          11.9916,
          12.1152,
          12.2382,
          12.3603,
          12.4815,
          12.6017,
          12.7209,
          12.8392,
          12.9569,
          13.0742,
          13.191,
          13.3075,
          13.4239,
          13.5404,
          13.6572,
          13.7746,
          13.8928,
          14.012,
          14.1325,
          14.2544,
          14.3782,
          14.5038,
          14.6316,
          14.7614,
          14.8934,
          15.0275,
          15.1637,
          15.3018,
          15.4419,
          15.5838,
          15.7276,
          15.8732,
          16.0206,
          16.1697,
          16.3204,
          16.4728,
          16.6268,
          16.7826,
          16.9401,
          17.0995,
          17.2607,
          17.4237,
          17.5885,
          17.7553,
          17.9242,
          18.0954,
          18.2689
        ];

        sValues = [
          0.09182,
          0.09153,
          0.09124,
          0.09094,
          0.09065,
          0.09036,
          0.09007,
          0.08977,
          0.08948,
          0.08919,
          0.0889,
          0.08861,
          0.08831,
          0.08801,
          0.08771,
          0.08741,
          0.08711,
          0.08681,
          0.08651,
          0.08621,
          0.08592,
          0.08563,
          0.08535,
          0.08507,
          0.08481,
          0.08455,
          0.0843,
          0.08406,
          0.08383,
          0.08362,
          0.08342,
          0.08324,
          0.08308,
          0.08292,
          0.08279,
          0.08266,
          0.08255,
          0.08245,
          0.08236,
          0.08229,
          0.08223,
          0.08218,
          0.08215,
          0.08213,
          0.08212,
          0.08212,
          0.08214,
          0.08216,
          0.08219,
          0.08224,
          0.08229,
          0.08235,
          0.08241,
          0.08248,
          0.08254,
          0.08262,
          0.08269,
          0.08276,
          0.08283,
          0.08289,
          0.08295,
          0.08301,
          0.08307,
          0.08311,
          0.08314,
          0.08317,
          0.08318,
          0.08318,
          0.08316,
          0.08313,
          0.08308,
          0.08301,
          0.08293,
          0.08284,
          0.08273,
          0.0826,
          0.08246,
          0.08231,
          0.08215,
          0.08198,
          0.08181,
          0.08163,
          0.08145,
          0.08128,
          0.08111,
          0.08096,
          0.08082,
          0.08069,
          0.08058,
          0.08048,
          0.08041,
          0.08034,
          0.0803,
          0.08026,
          0.08025,
          0.08025,
          0.08026,
          0.08029,
          0.08034,
          0.0804,
          0.08047,
          0.08056,
          0.08067,
          0.08078,
          0.08092,
          0.08106,
          0.08122,
          0.08139,
          0.08157,
          0.08177,
          0.08198,
          0.0822,
          0.08243,
          0.08267,
          0.08292,
          0.08317,
          0.08343,
          0.0837,
          0.08397,
          0.08425,
          0.08453,
          0.08481,
          0.0851,
          0.08539,
          0.08568,
          0.08599,
          0.08629,
          0.0866,
          0.08691,
          0.08723,
          0.08755
        ];
      } else {
        List<double> heightList = [
          65,
          65.5,
          66,
          66.5,
          67,
          67.5,
          68,
          68.5,
          69,
          69.5,
          70,
          70.5,
          71,
          71.5,
          72,
          72.5,
          73,
          73.5,
          74,
          74.5,
          75,
          75.5,
          76,
          76.5,
          77,
          77.5,
          78,
          78.5,
          79,
          79.5,
          80,
          80.5,
          81,
          81.5,
          82,
          82.5,
          83,
          83.5,
          84,
          84.5,
          85,
          85.5,
          86,
          86.5,
          87,
          87.5,
          88,
          88.5,
          89,
          89.5,
          90,
          90.5,
          91,
          91.5,
          92,
          92.5,
          93,
          93.5,
          94,
          94.5,
          95,
          95.5,
          96,
          96.5,
          97,
          97.5,
          98,
          98.5,
          99,
          99.5,
          100,
          100.5,
          101,
          101.5,
          102,
          102.5,
          103,
          103.5,
          104,
          104.5,
          105,
          105.5,
          106,
          106.5,
          107,
          107.5,
          108,
          108.5,
          109,
          109.5,
          110,
          110.5,
          111,
          111.5,
          112,
          112.5,
          113,
          113.5,
          114,
          114.5,
          115,
          115.5,
          116,
          116.5,
          117,
          117.5,
          118,
          118.5,
          119,
          119.5,
          120
        ];

        index = heightList.indexOf(roundedHeightCm);

        lValues = [
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521,
          -0.3521
        ];

        mValues = [
          7.4327,
          7.5504,
          7.6673,
          7.7834,
          7.8986,
          8.0132,
          8.1272,
          8.241,
          8.3547,
          8.468,
          8.5808,
          8.6927,
          8.8036,
          8.9135,
          9.0221,
          9.1292,
          9.2347,
          9.339,
          9.442,
          9.5438,
          9.644,
          9.7425,
          9.8392,
          9.9341,
          10.0274,
          10.1194,
          10.2105,
          10.3012,
          10.3923,
          10.4845,
          10.5781,
          10.6737,
          10.7718,
          10.8728,
          10.9772,
          11.0851,
          11.1966,
          11.3114,
          11.429,
          11.549,
          11.6707,
          11.7937,
          11.9173,
          12.0411,
          12.1645,
          12.2871,
          12.4089,
          12.5298,
          12.6495,
          12.7683,
          12.8864,
          13.0038,
          13.1209,
          13.2376,
          13.3541,
          13.4705,
          13.587,
          13.7041,
          13.8217,
          13.9403,
          14.06,
          14.1811,
          14.3037,
          14.4282,
          14.5547,
          14.6832,
          14.814,
          14.9468,
          15.0818,
          15.2187,
          15.3576,
          15.4985,
          15.6412,
          15.7857,
          15.932,
          16.0801,
          16.2298,
          16.3812,
          16.5342,
          16.6889,
          16.8454,
          17.0036,
          17.1637,
          17.3256,
          17.4894,
          17.655,
          17.8226,
          17.9924,
          18.1645,
          18.339,
          18.5158,
          18.6948,
          18.8759,
          19.059,
          19.2439,
          19.4304,
          19.6185,
          19.8081,
          19.999,
          20.1912,
          20.3846,
          20.5789,
          20.7741,
          20.97,
          21.1666,
          21.3636,
          21.5611,
          21.7588,
          21.9568,
          22.1549,
          22.353
        ];

        sValues = [
          0.08217,
          0.08214,
          0.08212,
          0.08212,
          0.08213,
          0.08214,
          0.08217,
          0.08221,
          0.08226,
          0.08231,
          0.08237,
          0.08243,
          0.0825,
          0.08257,
          0.08264,
          0.08272,
          0.08278,
          0.08285,
          0.08292,
          0.08298,
          0.08303,
          0.08308,
          0.08312,
          0.08315,
          0.08317,
          0.08318,
          0.08317,
          0.08315,
          0.08311,
          0.08305,
          0.08298,
          0.0829,
          0.08279,
          0.08268,
          0.08255,
          0.08241,
          0.08225,
          0.08209,
          0.08191,
          0.08174,
          0.08156,
          0.08138,
          0.08121,
          0.08105,
          0.0809,
          0.08076,
          0.08064,
          0.08054,
          0.08045,
          0.08038,
          0.08032,
          0.08028,
          0.08025,
          0.08024,
          0.08025,
          0.08027,
          0.08031,
          0.08036,
          0.08043,
          0.08051,
          0.0806,
          0.08071,
          0.08083,
          0.08097,
          0.08112,
          0.08129,
          0.08146,
          0.08165,
          0.08185,
          0.08206,
          0.08229,
          0.08252,
          0.08277,
          0.08302,
          0.08328,
          0.08354,
          0.08381,
          0.08408,
          0.08436,
          0.08464,
          0.08493,
          0.08521,
          0.08551,
          0.0858,
          0.08611,
          0.08641,
          0.08673,
          0.08704,
          0.08736,
          0.08768,
          0.088,
          0.08832,
          0.08864,
          0.08896,
          0.08928,
          0.0896,
          0.08991,
          0.09022,
          0.09054,
          0.09085,
          0.09116,
          0.09147,
          0.09177,
          0.09208,
          0.09239,
          0.0927,
          0.093,
          0.09331,
          0.09362,
          0.09393,
          0.09424
        ];
      }
    }
    print("index $index");
    // Look up the L, M, and S values for the given age range and gender
    double L = lValues[index]; // Box-Cox transformation parameter
    double M = mValues[index]; // Median weight for the given height and sex
    double S = sValues[index]; // Coefficient of variation or standard deviation
    print(L);
    print(M);
    print(S);

    double weight_ = roundedHeightCm / 100;
    print(weight_);
    // Calculate the expected weight based on the child's height and sex
    double expectedWeight =
        M * math.pow(weight_, L); //M * math.pow((height / 100), L);
    print("expected weight $expectedWeight");

    // Calculate the weight-for-height z-score
    double wfhZScore =
        //(weightKg - expectedWeight) / (S * L);

        ((math.pow((weightKg / M), L) - 1) / (S * L));
//Z-score = ((weight / M)^L - 1) / (L x S)
    return wfhZScore;
  }

  double getHeadCircmZScore(double headCircum, int ageMonths, String sex) {
    List<double> lValues;
    List<double> sValues;
    List<double> mValues;

    if (sex == "female") {
      // L, S, and M values for weight-for-age z-scores for males, ages 0 to 60 months
      lValues = [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ];
      mValues = [
        33.8787,
        36.5463,
        38.2521,
        39.5328,
        40.5817,
        41.459,
        42.1995,
        42.829,
        43.3671,
        43.83,
        44.2319,
        44.5844,
        44.8965,
        45.1752,
        45.4265,
        45.6551,
        45.865,
        46.0598,
        46.2424,
        46.4152,
        46.5801,
        46.7384,
        46.8913,
        47.0391,
        47.1822,
        47.3204,
        47.4536,
        47.5817,
        47.7045,
        47.8219,
        47.934,
        48.041,
        48.1432,
        48.2408,
        48.3343,
        48.4239,
        48.5099,
        48.5926,
        48.6722,
        48.7489,
        48.8228,
        48.8941,
        48.9629,
        49.0294,
        49.0937,
        49.156,
        49.2164,
        49.2751,
        49.3321,
        49.3877,
        49.4419,
        49.4947,
        49.5464,
        49.5969,
        49.6464,
        49.6947,
        49.7421,
        49.7885,
        49.8341,
        49.8789,
        49.9229
      ];
      //print('array $lValues.length');
      sValues = [
        0.03496,
        0.0321,
        0.03168,
        0.0314,
        0.03119,
        0.03102,
        0.03087,
        0.03075,
        0.03063,
        0.03053,
        0.03044,
        0.03035,
        0.03027,
        0.03019,
        0.03012,
        0.03006,
        0.02999,
        0.02993,
        0.02987,
        0.02982,
        0.02977,
        0.02972,
        0.02967,
        0.02962,
        0.02957,
        0.02953,
        0.02949,
        0.02945,
        0.02941,
        0.02937,
        0.02933,
        0.02929,
        0.02926,
        0.02922,
        0.02919,
        0.02915,
        0.02912,
        0.02909,
        0.02906,
        0.02903,
        0.029,
        0.02897,
        0.02894,
        0.02891,
        0.02888,
        0.02886,
        0.02883,
        0.0288,
        0.02878,
        0.02875,
        0.02873,
        0.0287,
        0.02868,
        0.02865,
        0.02863,
        0.02861,
        0.02859,
        0.02856,
        0.02854,
        0.02852,
        0.0285,
      ];
    } else if (sex == "male") {
      // L, S, and M values for weight-for-age z-scores for females, ages 0 to 60 months
      lValues = [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
      ];
      mValues = [
        34.4618,
        37.2759,
        39.1285,
        40.5135,
        41.6317,
        42.5576,
        43.3306,
        43.9803,
        44.53,
        44.9998,
        45.4051,
        45.7573,
        46.0661,
        46.3395,
        46.5844,
        46.806,
        47.0088,
        47.1962,
        47.3711,
        47.5357,
        47.6919,
        47.8408,
        47.9833,
        48.1201,
        48.2515,
        48.3777,
        48.4989,
        48.6151,
        48.7264,
        48.8331,
        48.9351,
        49.0327,
        49.126,
        49.2153,
        49.3007,
        49.3826,
        49.4612,
        49.5367,
        49.6093,
        49.6791,
        49.7465,
        49.8116,
        49.8745,
        49.9354,
        49.9942,
        50.0512,
        50.1064,
        50.1598,
        50.2115,
        50.2617,
        50.3105,
        50.3578,
        50.4039,
        50.4488,
        50.4926,
        50.5354,
        50.5772,
        50.6183,
        50.6587,
        50.6984,
        50.7375
      ];
      sValues = [
        0.03686,
        0.03133,
        0.02997,
        0.02918,
        0.02868,
        0.02837,
        0.02817,
        0.02804,
        0.02796,
        0.02792,
        0.0279,
        0.02789,
        0.02789,
        0.02789,
        0.02791,
        0.02792,
        0.02795,
        0.02797,
        0.028,
        0.02803,
        0.02806,
        0.0281,
        0.02813,
        0.02817,
        0.02821,
        0.02825,
        0.0283,
        0.02834,
        0.02838,
        0.02842,
        0.02847,
        0.02851,
        0.02855,
        0.02859,
        0.02863,
        0.02867,
        0.02871,
        0.02875,
        0.02878,
        0.02882,
        0.02886,
        0.02889,
        0.02893,
        0.02896,
        0.02899,
        0.02903,
        0.02906,
        0.02909,
        0.02912,
        0.02915,
        0.02918,
        0.02921,
        0.02924,
        0.02927,
        0.02929,
        0.02932,
        0.02935,
        0.02938,
        0.0294,
        0.02943,
        0.02946
      ];
    } else {
      throw ArgumentError("Invalid sex");
    }

    // Find the closest index in the L, S, and M value lists for the given age (assuming monthly intervals)
    int index = ageMonths;
    if (index < 0) {
      index = 0;
    } else if (index >= lValues.length) {
      index = lValues.length - 1;
    }

    // Calculate the weight-for-age z-score using the L, S, and M values at the closest index
    print(index);
    double L = lValues[index];

    double S = sValues[index];
    double M = mValues[index];
    print(L);
    print(S);
    print('M=$M');

    double weightForAgeZScore = (math.pow((headCircum / M), L) - 1) / (S * L);
    //double weightForAgeZScore = ((weightInKg / M).pow(L) - 1) / (S * L);

    return weightForAgeZScore;
  }

  double getArmCircumZScore(double armCircum, int ageMonths, String sex) {
    List<double> lValues;
    List<double> sValues;
    List<double> mValues;

    if (sex == "female") {
      // L, S, and M values for weight-for-age z-scores for males, ages 0 to 60 months
      lValues = [
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
        -0.1733,
      ];
      print('l');
      print(lValues.length);

      mValues = [
        12.7771,
        12.8795,
        12.9952,
        13.0284,
        13.3649,
        13.6061,
        13.7771,
        13.9018,
        13.9952,
        14.0665,
        14.1217,
        14.1667,
        14.2065,
        14.2455,
        14.2859,
        14.3289,
        14.3752,
        14.4254,
        14.4795,
        14.5372,
        14.5987,
        14.6639,
        14.7328,
        14.8049,
        14.8795,
        14.9559,
        15.0327,
        15.1085,
        15.1817,
        15.2514,
        15.3168,
        15.3779,
        15.4351,
        15.4895,
        15.5423,
        15.5941,
        15.6456,
        15.6969,
        15.7483,
        15.7997,
        15.8509,
        15.9016,
        15.9518,
        16.0016,
        16.0509,
        16.1001,
        16.1491,
        16.1983,
        16.2477,
        16.2974,
        16.3475,
        16.3981,
        16.449,
        16.5001,
        16.5514,
        16.6026,
        16.6534,
        16.7039,
        16.7539,
        16.8034,
        16.8526
      ];
      print('m');
      print(mValues.length);
      //print('array $lValues.length');
      sValues = [
        0.08183,
        0.08208,
        0.08225,
        0.08263,
        0.08298,
        0.08325,
        0.08343,
        0.08352,
        0.08351,
        0.08342,
        0.08326,
        0.08305,
        0.0828,
        0.08254,
        0.08227,
        0.08202,
        0.08179,
        0.0816,
        0.08143,
        0.08131,
        0.08123,
        0.08118,
        0.08118,
        0.08121,
        0.08127,
        0.08136,
        0.08147,
        0.08161,
        0.08178,
        0.08196,
        0.08217,
        0.0824,
        0.08265,
        0.08292,
        0.0832,
        0.08351,
        0.08383,
        0.08416,
        0.08451,
        0.08487,
        0.08525,
        0.08563,
        0.08602,
        0.08642,
        0.08683,
        0.08723,
        0.08765,
        0.08806,
        0.08848,
        0.0889,
        0.08932,
        0.08974,
        0.09016,
        0.09057,
        0.09099,
        0.0914,
        0.09181,
        0.09221,
        0.09262,
        0.09301,
        0.09341,
      ];
      print('s');
      print(sValues.length);
    } else if (sex == "male") {
      // L, S, and M values for weight-for-age z-scores for females, ages 0 to 60 months
      lValues = [
        0.4792,
        0.4402,
        0.4010,
        0.3928,
        0.3475,
        0.3092,
        0.2755,
        0.2453,
        0.2179,
        0.1925,
        0.169,
        0.1469,
        0.1261,
        0.1064,
        0.0876,
        0.0697,
        0.0526,
        0.0362,
        0.0204,
        0.0051,
        -0.0097,
        -0.0239,
        -0.0378,
        -0.0512,
        -0.0643,
        -0.077,
        -0.0894,
        -0.1014,
        -0.1132,
        -0.1248,
        -0.136,
        -0.147,
        -0.1578,
        -0.1684,
        -0.1788,
        -0.189,
        -0.1989,
        -0.2087,
        -0.2184,
        -0.2278,
        -0.2372,
        -0.2463,
        -0.2553,
        -0.2642,
        -0.273,
        -0.2816,
        -0.2901,
        -0.2985,
        -0.3067,
        -0.3149,
        -0.3229,
        -0.3309,
        -0.3387,
        -0.3464,
        -0.3541,
        -0.3616,
        -0.3691,
        -0.3765,
        -0.3838,
        -0.391,
        -0.3981,
      ];
      print('l');
      print(lValues.length);
      mValues = [
        12.9817,
        13.0585,
        13.2585,
        13.4817,
        13.8097,
        14.0585,
        14.2389,
        14.3678,
        14.4591,
        14.5245,
        14.5733,
        14.6119,
        14.6449,
        14.6758,
        14.7063,
        14.738,
        14.7723,
        14.8095,
        14.8496,
        14.8926,
        14.9388,
        14.9883,
        15.041,
        15.0964,
        15.1536,
        15.2115,
        15.2693,
        15.3259,
        15.3808,
        15.4336,
        15.4839,
        15.5317,
        15.5771,
        15.6201,
        15.6611,
        15.7003,
        15.738,
        15.7745,
        15.8101,
        15.845,
        15.8793,
        15.9132,
        15.9467,
        15.9797,
        16.0124,
        16.0447,
        16.0767,
        16.1085,
        16.14,
        16.1714,
        16.2027,
        16.234,
        16.2654,
        16.2968,
        16.3283,
        16.3599,
        16.3916,
        16.4233,
        16.4551,
        16.4871,
        16.5191
      ];
      print('m');
      print(mValues.length);
      sValues = [
        0.07385,
        0.07408,
        0.07436,
        0.07475,
        0.07523,
        0.07566,
        0.07601,
        0.07629,
        0.0765,
        0.07665,
        0.07676,
        0.07683,
        0.07689,
        0.07694,
        0.07699,
        0.07703,
        0.07707,
        0.0771,
        0.07713,
        0.07717,
        0.07721,
        0.07725,
        0.07731,
        0.07738,
        0.07746,
        0.07755,
        0.07767,
        0.0778,
        0.07794,
        0.0781,
        0.07827,
        0.07846,
        0.07866,
        0.07887,
        0.07909,
        0.07933,
        0.07956,
        0.07981,
        0.08006,
        0.08032,
        0.08058,
        0.08085,
        0.08112,
        0.08139,
        0.08166,
        0.08194,
        0.08222,
        0.0825,
        0.08278,
        0.08307,
        0.08335,
        0.08364,
        0.08392,
        0.08421,
        0.0845,
        0.08479,
        0.08508,
        0.08537,
        0.08566,
        0.08595,
        0.08624
      ];
      print('s');
      print(sValues.length);
    } else {
      throw ArgumentError("Invalid sex");
    }

    // Find the closest index in the L, S, and M value lists for the given age (assuming monthly intervals)
    int index = ageMonths;
    if (index < 0) {
      index = 0;
    } else if (index >= lValues.length) {
      index = lValues.length - 1;
    }

    // Calculate the weight-for-age z-score using the L, S, and M values at the closest index
    print(index);
    double L = lValues[index];
    double S = sValues[index];
    double M = mValues[index];
    print(L);
    print(S);
    print('M=$M');

    double weightForAgeZScore = (math.pow((armCircum / M), L) - 1) / (S * L);
    //double weightForAgeZScore = ((weightInKg / M).pow(L) - 1) / (S * L);

    return weightForAgeZScore;
  }

  double getTricepsSkinfoldThicknessZScore(
      double skinfoldThickness, int ageMonths, String sex) {
    List<double> lValues;
    List<double> sValues;
    List<double> mValues;

    if (sex == "female") {
      // L, S, and M values for weight-for-age z-scores for males, ages 0 to 60 months
      lValues = [
        0.2975,
        0.2556,
        0.2061,
        0.1875,
        0.1256,
        0.0761,
        0.0349,
        -0.0003,
        -0.0307,
        -0.0572,
        -0.0799,
        -0.0995,
        -0.1161,
        -0.1303,
        -0.1424,
        -0.1527,
        -0.1615,
        -0.169,
        -0.1755,
        -0.1811,
        -0.1859,
        -0.1901,
        -0.1939,
        -0.1973,
        -0.2004,
        -0.2032,
        -0.2058,
        -0.2081,
        -0.2103,
        -0.2122,
        -0.214,
        -0.2155,
        -0.217,
        -0.2183,
        -0.2195,
        -0.2207,
        -0.2217,
        -0.2227,
        -0.2237,
        -0.2246,
        -0.2254,
        -0.2262,
        -0.227,
        -0.2278,
        -0.2285,
        -0.2292,
        -0.2298,
        -0.2304,
        -0.231,
        -0.2316,
        -0.2321,
        -0.2326,
        -0.2331,
        -0.2336,
        -0.2341,
        -0.2346,
        -0.235,
        -0.2355,
        -0.2359,
        -0.2363,
        -0.2368,
      ];
      print('l');
      print(lValues.length);

      mValues = [
        10.5516,
        10.2866,
        9.9706,
        9.7516,
        9.5866,
        9.3716,
        9.1194,
        8.8621,
        8.6228,
        8.4164,
        8.2468,
        8.1114,
        8.0042,
        7.9197,
        7.8538,
        7.8041,
        7.7681,
        7.7443,
        7.7315,
        7.7287,
        7.7347,
        7.7484,
        7.7692,
        7.7958,
        7.8273,
        7.8628,
        7.9006,
        7.9396,
        7.9786,
        8.0167,
        8.0535,
        8.0887,
        8.1224,
        8.1545,
        8.1855,
        8.2156,
        8.245,
        8.2738,
        8.3019,
        8.3294,
        8.356,
        8.3818,
        8.4068,
        8.4311,
        8.455,
        8.4786,
        8.5019,
        8.525,
        8.5481,
        8.5711,
        8.5942,
        8.6174,
        8.6406,
        8.6641,
        8.6876,
        8.7112,
        8.7349,
        8.7586,
        8.7824,
        8.8061,
        8.8298
      ];
      print('m');
      print(mValues.length);
      //print('array $lValues.length');
      sValues = [
        0.15235,
        0.15637,
        0.16007,
        0.17535,
        0.18337,
        0.19007,
        0.1954,
        0.19934,
        0.20192,
        0.20339,
        0.20413,
        0.20442,
        0.20445,
        0.20432,
        0.20409,
        0.20384,
        0.20363,
        0.2035,
        0.2035,
        0.20364,
        0.20393,
        0.20437,
        0.20496,
        0.20568,
        0.20652,
        0.20748,
        0.20855,
        0.20971,
        0.21096,
        0.21228,
        0.21366,
        0.21509,
        0.21657,
        0.21809,
        0.21964,
        0.22122,
        0.22282,
        0.22444,
        0.22608,
        0.22772,
        0.22937,
        0.23101,
        0.23264,
        0.23427,
        0.23587,
        0.23747,
        0.23904,
        0.2406,
        0.24215,
        0.24367,
        0.24517,
        0.24665,
        0.24811,
        0.24954,
        0.25095,
        0.25233,
        0.25369,
        0.25502,
        0.25633,
        0.25761,
        0.25887
      ];

      print('s');
      print(sValues.length);
    } else if (sex == "male") {
      // L, S, and M values for weight-for-age z-scores for females, ages 0 to 60 months
      lValues = [
        0.0377,
        0.0265,
        0.0106,
        0.0027,
        -0.0165,
        -0.0326,
        -0.0466,
        -0.059,
        -0.0703,
        -0.0806,
        -0.0901,
        -0.099,
        -0.1073,
        -0.1152,
        -0.1227,
        -0.1297,
        -0.1365,
        -0.143,
        -0.1492,
        -0.1552,
        -0.1609,
        -0.1665,
        -0.1719,
        -0.1771,
        -0.1821,
        -0.187,
        -0.1918,
        -0.1965,
        -0.201,
        -0.2054,
        -0.2097,
        -0.2139,
        -0.218,
        -0.2221,
        -0.226,
        -0.2299,
        -0.2336,
        -0.2374,
        -0.241,
        -0.2446,
        -0.2481,
        -0.2515,
        -0.2549,
        -0.2583,
        -0.2616,
        -0.2648,
        -0.268,
        -0.2711,
        -0.2742,
        -0.2772,
        -0.2802,
        -0.2832,
        -0.2861,
        -0.289,
        -0.2918,
        -0.2946,
        -0.2974,
        -0.3001,
        -0.3028,
        -0.3055,
        -0.3081,
      ];
      print('l');
      print(lValues.length);
      mValues = [
        10.5639,
        10.284,
        9.9885,
        9.7639,
        9.584,
        9.3885,
        9.1729,
        8.9535,
        8.7435,
        8.5518,
        8.3812,
        8.2323,
        8.1041,
        7.9958,
        7.9064,
        7.8345,
        7.7781,
        7.7351,
        7.7036,
        7.6821,
        7.6697,
        7.6652,
        7.6675,
        7.675,
        7.6863,
        7.7003,
        7.7156,
        7.7312,
        7.7463,
        7.7602,
        7.7726,
        7.7832,
        7.792,
        7.7989,
        7.804,
        7.8074,
        7.8094,
        7.8101,
        7.8096,
        7.808,
        7.8051,
        7.8009,
        7.7954,
        7.7885,
        7.7804,
        7.771,
        7.7605,
        7.7489,
        7.7364,
        7.7233,
        7.7096,
        7.6955,
        7.6812,
        7.6669,
        7.6525,
        7.6383,
        7.6242,
        7.6104,
        7.5968,
        7.5835,
        7.5706,
      ];
      print('m');
      print(mValues.length);
      sValues = [
        0.15218,
        0.15764,
        0.16224,
        0.16618,
        0.17264,
        0.17824,
        0.18304,
        0.18685,
        0.18968,
        0.19166,
        0.193,
        0.19389,
        0.19453,
        0.19506,
        0.19558,
        0.19612,
        0.19668,
        0.19728,
        0.19793,
        0.19862,
        0.19937,
        0.20018,
        0.20105,
        0.20196,
        0.20293,
        0.20394,
        0.20497,
        0.20603,
        0.2071,
        0.20818,
        0.20928,
        0.21039,
        0.21153,
        0.21269,
        0.21389,
        0.21513,
        0.21641,
        0.21773,
        0.21909,
        0.22049,
        0.22194,
        0.22343,
        0.22496,
        0.22653,
        0.22813,
        0.22975,
        0.2314,
        0.23306,
        0.23473,
        0.23642,
        0.23811,
        0.23981,
        0.24151,
        0.24322,
        0.24494,
        0.24666,
        0.24839,
        0.25013,
        0.25186,
        0.2536,
        0.25533
      ];

      print('s');
      print(sValues.length);
    } else {
      throw ArgumentError("Invalid sex");
    }

    // Find the closest index in the L, S, and M value lists for the given age (assuming monthly intervals)
    int index = ageMonths;
    if (index < 0) {
      index = 0;
    } else if (index >= lValues.length) {
      index = lValues.length - 1;
    }

    // Calculate the weight-for-age z-score using the L, S, and M values at the closest index
    print(index);
    double L = lValues[index];

    double S = sValues[index];
    double M = mValues[index];
    print(L);
    print(S);
    print('M=$M');

    double skinfoldThicknessZScore =
        (math.pow((skinfoldThickness / M), L) - 1) / (S * L);
    //double weightForAgeZScore = ((weightInKg / M).pow(L) - 1) / (S * L);

    return skinfoldThicknessZScore;
  }
}

class GenderInput extends StatefulWidget {
  const GenderInput({Key? key}) : super(key: key);

  @override
  _GenderInputState createState() => _GenderInputState();
}

class _GenderInputState extends State<GenderInput> {
  String? _selectedGender;

  final List<String> _genders = <String>[
    'Male',
    'Female',
  ];

  @override
  Widget build(BuildContext context) {
    final height = MediaQuery.of(context).size.height;
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        SizedBox(
          width: MediaQuery.of(context).size.width / 2.85,
          child: Text(
            'Gender: ',
            style: TextStyle(
              fontSize: height * 0.025,
            ),
          ),
        ),
        Flexible(
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(5.0),
              color: Colors.transparent,
              border: Border.all(color: Colors.grey),
            ),
            child: Padding(
              padding: const EdgeInsets.only(left: 10, top: 5, bottom: 5),
              child: DropdownButton<String>(
                underline: const SizedBox(),
                value: _selectedGender,
                items: _genders
                    .map(
                      (gender) => DropdownMenuItem<String>(
                        value: gender,
                        child: Text(gender),
                      ),
                    )
                    .toList(),
                onChanged: (value) {
                  setState(
                    () {
                      _selectedGender = value;
                    },
                  );
                },
                borderRadius: BorderRadius.circular(10),
                isExpanded: true,
              ),
            ),
          ),
        ),
      ],
    );
  }
}
